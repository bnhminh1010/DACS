const axios = require("axios");
const pdf = require("pdf-parse");
const mammoth = require("mammoth");
const { logModelEvaluation } = require("./log.service");

require("dotenv").config();

async function convertToText(fileName, base64Content) {
  try {
    const fileBuffer = Buffer.from(base64Content, "base64");
    console.log(
      "üëâ ƒêang x·ª≠ l√Ω file:",
      fileName,
      "- K√≠ch th∆∞·ªõc:",
      fileBuffer.length
    );

    if (fileName.toLowerCase().endsWith(".pdf")) {
      const data = await pdf(fileBuffer);
      return data.text;
    } else if (fileName.toLowerCase().match(/\.(doc|docx)$/)) {
      const result = await mammoth.extractRawText({ buffer: fileBuffer });
      if (!result.value) {
        throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung t·ª´ file Word");
      }
      return result.value;
    } else {
      throw new Error("‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi file:", error);
    throw new Error(
      `Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung file ${fileName}: ${error.message}`
    );
  }
}

const generateQuestions = async (
  fileName,
  fileContent,
  specialty = "math",
  difficulty = "easy"
) => {
  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file:", fileName);
    const textContent = await convertToText(fileName, fileContent);
    if (!textContent || textContent.trim().length === 0) {
      throw new Error("‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung text t·ª´ file");
    }
    console.log(
      "‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi file th√†nh text, ƒë·ªô d√†i:",
      textContent.length
    );

    const openRouterModels = {
      math: "mistralai/devstral-small:free",
      physics: "deepseek/deepseek-r1:free",
      chemistry: "mistralai/mistral-7b-instruct:free",
      programming: "qwen/qwen-2.5-coder-32b-instruct:free",
    };

    const difficultyMap = {
      easy: "d·ªÖ",
      medium: "trung b√¨nh",
      hard: "kh√≥",
    };
    const difficultyText = difficultyMap[difficulty] || "d·ªÖ";

    const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh. 
H√£y t·∫°o 5 c√¢u h·ªèi tr·∫Øc nghi·ªám ƒë·ªô kh√≥: ${difficultyText} t·ª´ n·ªôi dung sau:

"${textContent}"

M·ªói c√¢u h·ªèi c√≥ ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:
{
  "question": "...",
  "explanation": "...",
  "options": [
    { "text": "...", "is_correct": true/false },
    ...
  ]
}

Ch·ªâ tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON ch·ª©a 5 c√¢u h·ªèi nh∆∞ v√≠ d·ª• tr√™n.
    `.trim();

    const modelName = openRouterModels[specialty];

    if (modelName) {
      console.log(`üì° G·ªçi model OpenRouter: ${modelName}`);

      if (!process.env.OPENROUTER_API_KEY || !process.env.OPENROUTER_API_URL) {
        throw new Error("‚ùå Thi·∫øu c·∫•u h√¨nh OpenRouter API");
      }

      const startTime = Date.now();

      const response = await axios.post(
        process.env.OPENROUTER_API_URL,
        {
          model: modelName,
          max_tokens: 2048,
          temperature: 0.7,
          messages: [
            {
              role: "system",
              content: "B·∫°n l√† m·ªôt tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh.",
            },
            { role: "user", content: prompt },
          ],
        },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          },
        }
      );

      const endTime = Date.now();
      const responseTime = endTime - startTime;

      console.log(`‚è±Ô∏è Th·ªùi gian ph·∫£n h·ªìi t·ª´ model: ${responseTime}ms`);

      const rawText =
        response.data?.choices?.[0]?.message?.content ||
        response.data?.completion;
      if (!rawText) throw new Error("‚ùå Kh√¥ng c√≥ n·ªôi dung tr·∫£ v·ªÅ t·ª´ model");

      console.log("üì® Ph·∫£n h·ªìi t·ª´ model:", rawText.slice(0, 300), "...");

      const cleanText = rawText
        .replace(/```(json)?\n?/gi, "")
        .replace(/^[^\[{]*([\[{])/s, "$1")
        .replace(/([\]}])[^}\]]*$/s, "$1")
        .replace(/(?:\\n)+/g, "\n")
        .trim();

      let questions;
      try {
        questions = JSON.parse(cleanText);
        if (!Array.isArray(questions))
          throw new Error("‚ùå Kh√¥ng ph·∫£i l√† m·∫£ng JSON");
      } catch (parseErr) {
        console.error("‚ùå L·ªói parse JSON:", cleanText);
        throw new Error("Kh√¥ng th·ªÉ parse JSON t·ª´ ph·∫£n h·ªìi model");
      }

      questions.forEach((q, i) => {
        if (!q.question || !q.explanation || !Array.isArray(q.options)) {
          throw new Error(`‚ùå C√¢u h·ªèi ${i + 1} thi·∫øu th√¥ng tin b·∫Øt bu·ªôc`);
        }
        if (q.options.length < 2) {
          throw new Error(`‚ùå C√¢u h·ªèi ${i + 1} c·∫ßn √≠t nh·∫•t 2 l·ª±a ch·ªçn`);
        }
        const correctOptions = q.options.filter((opt) => opt.is_correct);
        if (correctOptions.length !== 1) {
          throw new Error(`‚ùå C√¢u h·ªèi ${i + 1} ph·∫£i c√≥ ƒë√∫ng 1 ƒë√°p √°n ƒë√∫ng`);
        }
      });

      console.log(
        `‚úÖ ƒê√£ t·∫°o ${questions.length} c√¢u h·ªèi t·ª´ model ${modelName}`
      );

      const resultData = {
        specialty,
        difficulty,
        inputLength: textContent.length,
        responseTime,
        questions: questions.length,
        errors: 0,
        summary: "OK",
      };

      
      return questions;
    }

    // N·∫øu kh√¥ng c√≥ model OpenRouter ph√π h·ª£p th√¨ g·ªçi Google Gemini
    console.log("ü§ñ G·ªçi Google Gemini (chuy√™n m√¥n 'other')");

    if (!process.env.GOOGLE_AI_API_KEY || !process.env.GOOGLE_AI_API_URL) {
      throw new Error("‚ùå Thi·∫øu c·∫•u h√¨nh API Gemini");
    }

    const geminiUrl = `${process.env.GOOGLE_AI_API_URL}?key=${process.env.GOOGLE_AI_API_KEY}`;
    const start = Date.now();

    const responseGemini = await axios.post(
      geminiUrl,
      {
        contents: [{ parts: [{ text: prompt }] }],
      },
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    const end = Date.now();
    const responseTime = end - start;
    console.log(`‚è±Ô∏è Th·ªùi gian ph·∫£n h·ªìi t·ª´ Gemini: ${responseTime}ms`);

    const rawTextGemini = responseGemini.data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!rawTextGemini) throw new Error("‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Gemini");

    const cleanTextGemini = rawTextGemini.replace(/```json\n|\n```/g, "").trim();
    const questionsGemini = JSON.parse(cleanTextGemini);

    if (!Array.isArray(questionsGemini))
      throw new Error("‚ùå Kh√¥ng ph·∫£i l√† m·∫£ng JSON");

    questionsGemini.forEach((q, i) => {
      if (!q.question || !q.explanation || !Array.isArray(q.options)) {
        throw new Error(`‚ùå C√¢u h·ªèi ${i + 1} thi·∫øu th√¥ng tin b·∫Øt bu·ªôc`);
      }
      if (q.options.length < 2) {
        throw new Error(`‚ùå C√¢u h·ªèi ${i + 1} c·∫ßn √≠t nh·∫•t 2 l·ª±a ch·ªçn`);
      }
      const correctOptions = q.options.filter((opt) => opt.is_correct);
      if (correctOptions.length !== 1) {
        throw new Error(`‚ùå C√¢u h·ªèi ${i + 1} ph·∫£i c√≥ ƒë√∫ng 1 ƒë√°p √°n ƒë√∫ng`);
      }
    });

    console.log("‚úÖ ƒê√£ t·∫°o c√¢u h·ªèi th√†nh c√¥ng v·ªõi Gemini");

    const resultDataGemini = {
      specialty: "other",
      difficulty,
      inputLength: textContent.length,
      responseTime,
      questions: questionsGemini.length,
      errors: 0,
      summary: "OK",
    };

    

    return questionsGemini;

  } catch (error) {
    console.error("üî• Chi ti·∫øt l·ªói:", error);
    throw error;
  }
};

module.exports = { generateQuestions };
